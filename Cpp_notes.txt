# **************************************************************************** #
#                                                                              #
#                                                         ::::::::             #
#    Cpp_notes.txt                                      :+:    :+:             #
#                                                      +:+                     #
#    By: greed <greed@student.codam.nl>               +#+                      #
#                                                    +#+                       #
#    Created: 2020/07/24 18:01:04 by greed         #+#    #+#                  #
#    Updated: 2020/08/07 15:55:52 by greed         ########   odam.nl          #
#                                                                              #
# **************************************************************************** #

Cpp is strange as shit, so let's compile a notesheet so I don't forget
everything.

** -- **				** -- **				** -- **
Includes, not sure what is inside of these yet so lets find out!

#include <iostream> :
-
std::cout ---
The global objects std::cout and std::wcout control output to a stream buffer of
	implementation-defined type (derived from std::streambuf), associated with
	the standard C output stream stdout.
-
std::cin ---
The global objects std::cin and std::wcin control input from a stream buffer
	of implementation-defined type (derived from std::streambuf), associated
	with the standard C input stream stdin.

These objects are guaranteed to be initialized during or before the first time an
	object of type std::ios_base::Init is constructed and are available for use
	in the constructors and destructors of static objects with ordered initialization
	(as long as <iostream> is included before the object is defined).

Unless sync_with_stdio(false) has been issued, it is safe to concurrently access
	these objects from multiple threads for both formatted and unformatted input.

Once std::cin is constructed, std::cin.tie() returns &std::cout, and likewise,
	std::wcin.tie() returns &std::wcout. This means that any formatted input
	operation on std::cin forces a call to std::cout.flush() if any characters
	are pending for output.
-
std::cerr ---
Object of class ostream that represents the standard error stream oriented
	to narrow characters (of type char). It corresponds to the C stream stderr.

The standard error stream is a destination of characters determined by the environment.
	This destination may be shared by more than one standard object (such as cout or clog).

As an object of class ostream, characters can be written to it either as formatted data
	using the insertion operator (operator<<) or as unformatted data, using member
	functions such as write.

The object is declared in header <iostream> with external linkage and static duration:
	it lasts the entire duration of the program.

-
std::clog ---
Object of class ostream that represents the standard logging stream oriented to
	narrow characters (of type char). It corresponds, along with cerr, to the C stream stderr.

The standard logging stream is a destination of characters determined by the
	environment. This destination may be shared by more than one standard
	object (such as cout or cerr).

As an object of class ostream, characters can be written to it either as
	formatted data using the insertion operator (operator<<) or as unformatted data,
	using member functions such as write.

The object is declared in header <iostream> with external linkage and static
	duration: it lasts the entire duration of the program.

std::endl ---
Inserts a newline character into the output sequence os and flushes it as if by
	calling os.put(os.widen('\n')) followed by os.flush().

This is an output-only I/O manipulator, it may be called with an expression such
	as out << std::endl for any out of type std::basic_ostream.
With \n instead of endl, the output would be the same, but may not appear in real time.

#include <string> :
-
std::toupper
Converts the given character to uppercase according to the character conversion rules
	defined by the currently installed C locale.
-
str.at(INT);
Returns a reference to the character at position pos in the string.

The function automatically checks whether pos is the valid position of a character 
	in the string (i.e., whether pos is less than the string length), throwing an 
	out_of_range exception if it is not.

#include <fstream> :
-

_________  ++					_________  +++++  _________				_________  ++

SIMPLE FUNCTIONS
** HELLO WORLD **
int	main(){
	std::cout << "Hello World" << std::endl;
	return (0);
}

int		main(){
	std::cout << "Hello World" << std::endl;

	const double PI = 3.141592635;
	char myGrade = 'A';
	bool isHappy = true;
	int myAge = 39;
	int	five = 5;
	int	largetInt = 2147483647;
	float favNum = 3.141592;
	double otherfavNum = 1.6180339887;

	std::cout << "Favorite Number " << favNum << std::endl;
	std::cout << "Size of int " << sizeof(myAge) << std::endl;
	std::cout << "Larget int = " << largetInt << std::endl;

	std::cout << "5++ " << five++ << std::endl; // = 5
	std::cout << "++5 " << ++five << std::endl; // = 7
	std::cout << "5-- " << five-- << std::endl; // = 7
	std::cout << "--5 " << --five << std::endl; // = 5
	
	std::cout << "4 / 5 = " << 4 / 5 << std::endl; // = 0 
	std::cout << "4 / 5 = " << (float) 4 / 5 << std::endl; // = 0.8 
	return (0);
}

********** _______________________________________________ **********

int main(){
	int age = 70;
	int ageAtLastExam = 16;
	bool isNotDrunk = true;

	if(((age >= 1) (&& age < 16)) || !isNotDrunk){
		std::cout << "No Driving for you" << std::endl;
	}

}

				*** 		SWITCH		 ***
int main(){
	int greetingOption = 2;

	switch(greetingOption){
		case 1:
			std::cout << "sveiki" << std::endl;
			break;
		case 2:
			std::cout << "privet" << std::endl; <<--- WILL PRINT THIS
			break;
		case 3:
			std::cout << "hola" << std::endl;
			break;
		default :
			std::cout << "WAZZUP" << std::endl;
	}
	return (0);
}
				*** 		TERNARY 		 ***
				
int main(){ 
	
	variable = (condition) ? value(IF TRUE) : value(IF FALSE)
	int largestNum = (5>2) ? 5 : 2;
}
				*** 		TERNARY 		 ***

int main(){
	
	int myFavNums[5];
	int badNums[5] = {4, 13, 14, 24, 34};

	std::cout << "Bad Number 1: " << badNums[0] << std::endl;

	char myName[5][5] = {{'D', 'e', 'r', 'e', 'k'},
						{'B', 'a', 'n', 'a', 's'}};
}
______________________________________________________________________________________

COMPILING
clang++ TARGET-NAME TARGET-FILE.cpp

^^^ 		___ 		^^^ 		___
Making classes:

____

in Header file:
Blah.class.hpp

class Blah {

public:

	int foo;

	Blah( void )
	~Blah( void );
	
	void	bar(void);
};

----

in Blah.class.cpp file:
Blah::Blah( void ){

	std::cout << "Constructor Called" << std::endl;
	return;
}

Blah::~Blah( void ){

	std::cout << "Destructor Called" << std::endl;
	return;
}

void Blah::bar(void){
	std::cout << "Member function called" << std::endl;
}

***
initialization inline

Blah2::Blah2(char p1, intp2, float p3) : a1(p1), a2(p2), a3(p3){
	std::cout << "Constructor Called" << std::endl;
	std::cout << "this->a1" << this->a1 << std::endl;
	std::cout << "this->a2" << this->a2 << std::endl;
	std::cout << "this->a3" << this->a3 << std::endl;
}

____

in actual working file:
int main(){
	Blah instance;
	instance.foo = 42;
	std::cout << "instance.foo = " << instance.foo << std::endl;
	instance.bar();
	return (0);
}

int main(){

FragTrap frag;
ClapTrap clap;

for (int i = 0; i < 10; i++){
	frag.meleeAttack("Small Dick Boi");
}
for (int i = 0; i < 10; i++){
	frag.takeDamage(30);
}
for (int i = 0; i < 10; i++){
	frag.rangedAttack("Small Dick Boi");
}
for (int i = 0; i < 10; i++){
	frag.vaulthunter_dot_exe("Small Dick Boi");
}
for (int i = 0; i < 10; i++){
	frag.beRepaired(10);
}
// ______________________________________________________________________________________

for (int i = 0; i < 10; i++){
	clap.meleeAttack("Small Dick Boi");
}
for (int i = 0; i < 10; i++){
	clap.takeDamage(30);
}
for (int i = 0; i < 10; i++){
	clap.rangedAttack("Small Dick Boi");
}
for (int i = 0; i < 10; i++){
	clap.SPECIAL_ATTACK_I_DONT_REMEMBER_THE_NAME("Small Dick Boi");
}
for (int i = 0; i < 10; i++){
	clap.beRepaired(10);
}

}